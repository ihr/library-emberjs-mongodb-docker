<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.ingini.docker</groupId>
    <artifactId>ilibrary</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>iLibrary</name>
    <description>A short proof of concept project based on Java, EmberJS, MongoDB and Docker</description>
    <url>https://github.com/ihr/library-emberjs-mongodb-docker</url>


    <properties>
        <app.main.class>org.ingini.docker.ilibrary.Main</app.main.class>
        <app.docker.working.directory>app</app.docker.working.directory>
        <maven.compile.source>1.8</maven.compile.source>
        <maven.compile.target>1.8</maven.compile.target>

        <!-- Docker command properties -->
        <docker-container.name>ihristov_library</docker-container.name>

        <!-- Project dependencies-->
        <jetty.version>9.2.0.v20140526</jetty.version>
        <!-- MongoDB -->
        <jongo.version>1.0</jongo.version>
        <mongodb-driver.version>2.11.3</mongodb-driver.version>
        <!-- JAX-RS / Jersey -->
        <jersey.version>1.18.1</jersey.version>
        <!-- JSON Mapping / Jackson -->
        <jackson.version>2.4.0</jackson.version>
        <!-- DI -->
        <guice.version>3.0</guice.version>
        <!-- general purpose tools -->
        <commons-lang3.version>3.1</commons-lang3.version>
        <guava.version>15.0</guava.version>
        <jsr305.version>2.0.1</jsr305.version>
        <!-- testing tools -->
        <fest-assert.version>1.4</fest-assert.version>
        <junit.version>4.10</junit.version>
        <!-- Maven plugins -->
        <maven-shade-plugin.version>2.3</maven-shade-plugin.version>
        <exec-maven-plugin.version>1.3.1</exec-maven-plugin.version>
        <maven-replacer-plugin.version>1.5.3</maven-replacer-plugin.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <developers>
        <developer>
            <id>ihristov</id>
            <name>Ivan Hristov</name>
            <email>hristov[DOT]iv[AT]gmail[DOT]com</email>
        </developer>
    </developers>

    <dependencies>

        <!-- BEGIN: JETTY server -->
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-server</artifactId>
            <version>${jetty.version}</version>
        </dependency>

        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-webapp</artifactId>
            <version>${jetty.version}</version>
        </dependency>
        <!-- END: JETTY server -->

        <!-- BEGIN: JAX-RS -->
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>jsr311-api</artifactId>
            <version>1.1.1</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>com.sun.jersey.contribs</groupId>
            <artifactId>jersey-guice</artifactId>
            <version>${jersey.version}</version>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.jaxrs</groupId>
            <artifactId>jackson-jaxrs-json-provider</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <!-- END: JAX-RS -->

        <!-- BEGIN: GUICE -->
        <dependency>
            <groupId>com.google.inject</groupId>
            <artifactId>guice</artifactId>
            <version>${guice.version}</version>
        </dependency>
        <dependency>
            <groupId>com.google.inject.extensions</groupId>
            <artifactId>guice-servlet</artifactId>
            <version>${guice.version}</version>
        </dependency>
        <!-- END: GUICE -->

        <!-- BEGIN: MongoDB -->
        <dependency>
            <groupId>org.mongodb</groupId>
            <artifactId>mongo-java-driver</artifactId>
            <version>${mongodb-driver.version}</version>
        </dependency>

        <dependency>
            <groupId>org.jongo</groupId>
            <artifactId>jongo</artifactId>
            <version>${jongo.version}</version>
            <exclusions>
                <exclusion>
                    <artifactId>jackson-core</artifactId>
                    <groupId>com.fasterxml.jackson.core</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>jackson-databind</artifactId>
                    <groupId>com.fasterxml.jackson.core</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>jackson-annotations</artifactId>
                    <groupId>com.fasterxml.jackson.core</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- END: MongoDB -->

        <!-- BEGIN: Tools -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>${guava.version}</version>
        </dependency>

        <dependency>
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>jsr305</artifactId>
            <version>${jsr305.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>${commons-lang3.version}</version>
        </dependency>
        <!-- END: Tools -->

        <!-- BEGIN: Test dependencies -->
        <dependency>
            <groupId>org.easytesting</groupId>
            <artifactId>fest-assert</artifactId>
            <version>${fest-assert.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- END: Test dependencies -->

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>${exec-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <id>Build front-end via Grunt</id>
                        <phase>package</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>grunt</executable>
                            <workingDirectory>src/main/webapp</workingDirectory>
                            <arguments>
                                <argument>build</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>Build Docker container</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>docker</executable>
                            <arguments>
                                <argument>build</argument>
                                <argument>-t=ihristov/library</argument>
                                <argument>.</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>Ensure prepare.sh permission</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>chmod</executable>
                            <arguments>
                                <argument>+x</argument>
                                <argument>prepare.sh</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>Ensure setup.sh permission</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>chmod</executable>
                            <arguments>
                                <argument>+x</argument>
                                <argument>setup.sh</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>Remove previous Docker container</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>prepare.sh</executable>
                        </configuration>
                    </execution>
                    <execution>
                        <id>Start Docker container</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>docker</executable>
                            <arguments>
                                <argument>run</argument>
                                <argument>-p</argument>
                                <argument>8080:8080</argument>
                                <argument>-d</argument>
                                <argument>--name</argument>
                                <argument>${docker-container.name}</argument>
                                <argument>ihristov/library</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <!--<execution>-->
                    <!--<id>Stop Docker container</id>-->
                    <!--<phase>post-integration-test</phase>-->
                    <!--<goals>-->
                    <!--<goal>exec</goal>-->
                    <!--</goals>-->
                    <!--<configuration>-->
                    <!--<executable>docker</executable>-->
                    <!--<arguments>-->
                    <!--<argument>stop</argument>-->
                    <!--<argument>ihristov_library</argument>-->
                    <!--</arguments>-->
                    <!--</configuration>-->
                    <!--</execution>-->
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>${maven-shade-plugin.version}</version>
                <configuration>
                    <transformers>
                        <transformer
                                implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                            <manifestEntries>
                                <Main-Class>${app.main.class}</Main-Class>
                                <X-Compile-Source-JDK>${maven.compile.source}</X-Compile-Source-JDK>
                                <X-Compile-Target-JDK>${maven.compile.target}</X-Compile-Target-JDK>
                            </manifestEntries>
                        </transformer>
                    </transformers>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.google.code.maven-replacer-plugin</groupId>
                <artifactId>replacer</artifactId>
                <version>${maven-replacer-plugin.version}</version>
                <executions>
                    <execution>
                        <id>Prepare prepare.sh</id>
                        <phase>package</phase>
                        <goals>
                            <goal>replace</goal>
                        </goals>
                        <configuration>
                            <file>src/test/resources/prepare.sh.template</file>
                            <outputFile>prepare.sh</outputFile>
                            <regex>false</regex>
                            <token>{docker-container.name}</token>
                            <value>${docker-container.name}</value>
                        </configuration>
                    </execution>
                    <execution>
                        <id>Prepare Dockerfile</id>
                        <phase>package</phase>
                        <goals>
                            <goal>replace</goal>
                        </goals>
                        <configuration>
                            <file>src/test/resources/Dockerfile.template</file>
                            <outputFile>Dockerfile</outputFile>
                            <regex>false</regex>
                            <replacements>
                                <replacement>
                                    <token>{app.version}</token>
                                    <value>${version}</value>
                                </replacement>
                                <replacement>
                                    <token>{app.name}</token>
                                    <value>${artifactId}</value>
                                </replacement>
                                <replacement>
                                    <token>{app.working.directory}</token>
                                    <value>${app.docker.working.directory}</value>
                                </replacement>
                            </replacements>
                        </configuration>
                    </execution>
                    <execution>
                        <id>Prepare setup.sh</id>
                        <phase>package</phase>
                        <goals>
                            <goal>replace</goal>
                        </goals>
                        <configuration>
                            <file>src/test/resources/setup.sh.template</file>
                            <outputFile>setup.sh</outputFile>
                            <regex>false</regex>
                            <replacements>
                                <replacement>
                                    <token>{app.version}</token>
                                    <value>${version}</value>
                                </replacement>
                                <replacement>
                                    <token>{app.name}</token>
                                    <value>${artifactId}</value>
                                </replacement>
                                <replacement>
                                    <token>{app.working.directory}</token>
                                    <value>${app.docker.working.directory}</value>
                                </replacement>
                            </replacements>
                        </configuration>
                    </execution>
                </executions>

            </plugin>
        </plugins>
    </build>

</project>
